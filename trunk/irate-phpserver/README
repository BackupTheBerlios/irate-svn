*********
Crash Course
***************************


What is this ? => iRATE PHP server v0.2 "Anaella"

Which license ? => GPL licensed, baby

Who wrote it ? => jamendo.com (nice place for free music)



***
Intro
**************************

This is an iRATE server written in PHP.

It implements a new HTTP/XMLRPC protocol for iRATE, as well as new
SQL backend.




*********
Installation
***************************************

You basically need an Apache+PHP4 server, and some SQL database.

Currently, we only tested it with MySQL, but it should work
with other databases as well.

You need to create a database, and import the database scheme in 
the file setup.sql. To do so, you have to do somethin like :

irate-phpserver/# mysql -u root -p
password:
> create database irate;
> use irate;
> source setup.sql;
> exit;


Then you'll need to install some PEAR PHP modules :

# pear install -o XML_RPC DB

allow_url_fopen should also be turned on in php.ini

Copy config.php.SAMPLE to config.php

Then edit config.php, and fix the DSN with your database password.

You need to put your irate-phpserver somewhere in your apache webroot.
Additionally, you should have an apache vhost linked to the
irate-phpserver directory, so that the URL of the server is simple.




******
Quick FAQ
*************************

 - A server written in PHP ? WTF ?!

We'll most likely end up rewritting this code in C/C++ in the next
few years, but for the moment, writting it in PHP makes sense, 
maybe more for Apache than for PHP. Performance issues will be
mostly SQL related, and Apache will help with scalability. We also
would like many people to test new correlation algorithms, and
PHP is very easy to learn and use ; anyway most of the hard stuff
will be SQL-related.

 - Why a new HTTP protocol ?

To allow people behind a firewall to use iRATE. XMLRPC will
also allow third-party iRATE clients to be easily developed.





**********
The Protocol
*************************

Actually communicating with the iRATE server is very easy :
It's XML-RPC (www.xmlrpc.org). There are libraries for
almost every language out there, so we'll hopefully see
new irate-enabled software, websites, whatever.

The protocol reference has been moved to :

http://www.kallisti.net.nz/IrateDev/XmlRpc

A sample implementation is available in SVN in the module
irate-webclient.


**********
Tracks, Distributions and Sources
*****************



So we have 3 hierarchical elements : track, distribution and source.

A track is a song. A distribution is a file. A source is a couple (protocol,link).

A track can have multiple distributions (different encodings).

A distribution can have multiple sources (http mirrors, bittorent links, ...)

Each track is given an irate ID by the server.

iRATE servers can have two kinds of files. The ones that come
from LibreDB, and the other, server-specific ones.

For LibreDB files, The ID will be [LDBID]-0

For the others, the ID will be XXXXXXX-YYY-ZZ-1 (same scheme
as LDBIDs, but it's the irate server admin who gives
these IDs.)

See www.libredb.org for more info.

The point of using libredb IDs is to allow clients that connect
to a new server send the ratings of the libredb tracks they
previously rated. As libredb tracks will be registered on most
irate servers, the client will get good recommendations on
the new server, without rating random tracks at the beginning.

The shown crediturl should be the first available from source,
distribution and then track.



****
Where to test my implementation ?
*********************************

There's an irate-phpserver running at irate.jamendo.com

irate registration is turned off so you'll need to register at www.jamendo.com (free, easy & quick) (or use demo/demo)




****
What's next ?
************************

That's all folks, if you have any ideas/comments/suggestions/... ,
feel free to contact the right man, that's to say :

 * ajones@users.sourceforge.net : for iRATE related stuff
 * irate@jamendo.com : For iRATE-phpserver specific stuff
 * root@localhost : For personal stuff.

